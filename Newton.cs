using System;
using System.Collections.Generic;
using System.Linq;
using OpenTK;
using MathLib;
using Cocktail;


namespace CollisionTest
{



    public static class NewtonPhysics
    {
        // GENERATED BY COMPILER
        // pts = (a,b).Collide(EStyle style)
        //public static void CollideWrapper(IEnumerable<StateParam> states)
        //{
        //    if (states.Count() != 2)
        //        return;
        //    var a = states.ElementAt(0);
        //    var b = states.ElementAt(1);
        //    if (a.param == "a" && a.type == typeof(Particle)
        //        && b.param == "b" && b.type == typeof(Particle))
        //    {
        //        Collide((Particle)a.arg, (Particle)b.arg);
        //    }
        //}
        public static void Collide([State]Particle a, [State]Particle b)
        {
            if ((a.pt - b.pt).LengthSquared <= (a.radius + b.radius) * (a.radius + b.radius))
            {
                a.velocity *= -1;
                b.velocity *= -1;
            }
        }

        // GENERATED BY COMPILER
        // (a).GodPush(Vector force)
        //public static void GodPushWrapper(IEnumerable<StateParam> states, Vector3 impluse)
        //{
        //    if (states.Count() != 1)
        //        return;
        //    var state = states.ElementAt(0);
        //    if (state.type == typeof(Particle))
        //        GodPush((Particle)state.arg, impluse);
        //}
        public static void GodPush([State]Particle body, Vector3 impluse)
        {
            //body.accel += impluse / body.mass;
            body.velocity += impluse / body.mass * 1.0f;
        }

        public static void Move(Particle body, float dt)
        {
            body.pt += body.velocity * dt;
        }

        public static void Move(Particle body, float dt, AABB worldBox)
        {
            body.pt += body.velocity * dt;

            // naive implementation, flip if hits border
			if (body.pt.X < worldBox.Min.X || body.pt.X > worldBox.Max.X)
				body.velocity.X *= -1;
			if (body.pt.Y < worldBox.Min.Y || body.pt.Y > worldBox.Max.Y)
				body.velocity.Y *= -1;
			if (body.pt.Z < worldBox.Min.Z || body.pt.Z > worldBox.Max.Z)
				body.velocity.Z *= -1;
        }

    }
}