h1. Backlog (Jia Li)

# port bullet physics engine
#* Priority: 0
#* Targets:
#** port bullet or any other c++/c# physics engine, use it to drive the development

# HBase storage driver
#* Priority: 1
#* Targets:
#** refactor SpacetimeStorage to support extension with drivers
#** write storage driver for HBase

# HDFS-based name server
#* Priority: 1
#* Targets:
#** replace the psudo name server with HDFS-based implementation

# Trigger on data
#* Priority: 1
#* Link: Conditional patch/sync flag
#* Desc:
#** in the Accounting case, when the balance drop below zero some event should be triggerred
#** is that all invocation can be abstracted as the triggering of responses to events?

# Nesting invocation
#* Priority: 1
#* Targets:
#** a chronon can call another chronon
#** a function can be either chronon or non-chronon 

# Readonly states as parameters
#* Priority: 1

# State Migration
#* Priority: 1
#* Targets:
#** the ability of states to migrate to another Spacetime(ST)
#** such change to Spacetimes(departuring and arriving) should also be tracked in the same way as other chronons
#** 

# Conditional patch/sync flag
#* Priority: 5
#* Link: Trigger on data
#* Desc:
#** user can put a condition/constraint on sync flag
#** such condition should be propagated to all other ST that shows interest on the field, so that their sync logic can work consistently
#** Further more, we can probably also introduce instance-specific conditions (the current one is type-specific)

# Write/out-only state parameters
#* Priority: 5

# Defragment of ITC
#* Priority: 5
#* Desc:
#** because of the nature of the ITC (it's a binary tree), ITC utilizes this fact to reduce entropy of unnecessary versioning detail
#** over thousands of state migrations the tree would contain lots of fragment
#** the difficulty here is: the ITC tree is global, so how can we rehash it efficiently 

# Spacetime replica
#* Priority: 9
#* Desc:
#** having replica can help to achieve necessary data redundency for failover and parallel readable source


